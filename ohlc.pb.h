// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ohlc.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ohlc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ohlc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ohlc_2eproto;
namespace ohlc {
class OHLC;
struct OHLCDefaultTypeInternal;
extern OHLCDefaultTypeInternal _OHLC_default_instance_;
class SendOHLCResponse;
struct SendOHLCResponseDefaultTypeInternal;
extern SendOHLCResponseDefaultTypeInternal _SendOHLCResponse_default_instance_;
class StockRequest;
struct StockRequestDefaultTypeInternal;
extern StockRequestDefaultTypeInternal _StockRequest_default_instance_;
}  // namespace ohlc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ohlc {

// ===================================================================


// -------------------------------------------------------------------

class StockRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ohlc.StockRequest) */ {
 public:
  inline StockRequest() : StockRequest(nullptr) {}
  ~StockRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StockRequest(::google::protobuf::internal::ConstantInitialized);

  inline StockRequest(const StockRequest& from)
      : StockRequest(nullptr, from) {}
  StockRequest(StockRequest&& from) noexcept
    : StockRequest() {
    *this = ::std::move(from);
  }

  inline StockRequest& operator=(const StockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockRequest& operator=(StockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockRequest* internal_default_instance() {
    return reinterpret_cast<const StockRequest*>(
               &_StockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StockRequest& a, StockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StockRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StockRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StockRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StockRequest& from) {
    StockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StockRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ohlc.StockRequest";
  }
  protected:
  explicit StockRequest(::google::protobuf::Arena* arena);
  StockRequest(::google::protobuf::Arena* arena, const StockRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockCodeFieldNumber = 1,
  };
  // string stock_code = 1;
  void clear_stock_code() ;
  const std::string& stock_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stock_code(Arg_&& arg, Args_... args);
  std::string* mutable_stock_code();
  PROTOBUF_NODISCARD std::string* release_stock_code();
  void set_allocated_stock_code(std::string* value);

  private:
  const std::string& _internal_stock_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_code(
      const std::string& value);
  std::string* _internal_mutable_stock_code();

  public:
  // @@protoc_insertion_point(class_scope:ohlc.StockRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr stock_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};// -------------------------------------------------------------------

class SendOHLCResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ohlc.SendOHLCResponse) */ {
 public:
  inline SendOHLCResponse() : SendOHLCResponse(nullptr) {}
  ~SendOHLCResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendOHLCResponse(::google::protobuf::internal::ConstantInitialized);

  inline SendOHLCResponse(const SendOHLCResponse& from)
      : SendOHLCResponse(nullptr, from) {}
  SendOHLCResponse(SendOHLCResponse&& from) noexcept
    : SendOHLCResponse() {
    *this = ::std::move(from);
  }

  inline SendOHLCResponse& operator=(const SendOHLCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOHLCResponse& operator=(SendOHLCResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendOHLCResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendOHLCResponse* internal_default_instance() {
    return reinterpret_cast<const SendOHLCResponse*>(
               &_SendOHLCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendOHLCResponse& a, SendOHLCResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOHLCResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOHLCResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendOHLCResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendOHLCResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendOHLCResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SendOHLCResponse& from) {
    SendOHLCResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SendOHLCResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ohlc.SendOHLCResponse";
  }
  protected:
  explicit SendOHLCResponse(::google::protobuf::Arena* arena);
  SendOHLCResponse(::google::protobuf::Arena* arena, const SendOHLCResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:ohlc.SendOHLCResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};// -------------------------------------------------------------------

class OHLC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ohlc.OHLC) */ {
 public:
  inline OHLC() : OHLC(nullptr) {}
  ~OHLC() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OHLC(::google::protobuf::internal::ConstantInitialized);

  inline OHLC(const OHLC& from)
      : OHLC(nullptr, from) {}
  OHLC(OHLC&& from) noexcept
    : OHLC() {
    *this = ::std::move(from);
  }

  inline OHLC& operator=(const OHLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline OHLC& operator=(OHLC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OHLC& default_instance() {
    return *internal_default_instance();
  }
  static inline const OHLC* internal_default_instance() {
    return reinterpret_cast<const OHLC*>(
               &_OHLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OHLC& a, OHLC& b) {
    a.Swap(&b);
  }
  inline void Swap(OHLC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OHLC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OHLC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OHLC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OHLC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OHLC& from) {
    OHLC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OHLC* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ohlc.OHLC";
  }
  protected:
  explicit OHLC(::google::protobuf::Arena* arena);
  OHLC(::google::protobuf::Arena* arena, const OHLC& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockCodeFieldNumber = 7,
    kOpenFieldNumber = 1,
    kHighFieldNumber = 2,
    kLowFieldNumber = 3,
    kCloseFieldNumber = 4,
    kVolumeFieldNumber = 5,
    kValueFieldNumber = 6,
  };
  // string stock_code = 7;
  void clear_stock_code() ;
  const std::string& stock_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stock_code(Arg_&& arg, Args_... args);
  std::string* mutable_stock_code();
  PROTOBUF_NODISCARD std::string* release_stock_code();
  void set_allocated_stock_code(std::string* value);

  private:
  const std::string& _internal_stock_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_code(
      const std::string& value);
  std::string* _internal_mutable_stock_code();

  public:
  // double open = 1;
  void clear_open() ;
  double open() const;
  void set_open(double value);

  private:
  double _internal_open() const;
  void _internal_set_open(double value);

  public:
  // double high = 2;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // double low = 3;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double close = 4;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double volume = 5;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // double value = 6;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:ohlc.OHLC)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr stock_code_;
    double open_;
    double high_;
    double low_;
    double close_;
    double volume_;
    double value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OHLC

// double open = 1;
inline void OHLC::clear_open() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.open_ = 0;
}
inline double OHLC::open() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.open)
  return _internal_open();
}
inline void OHLC::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.open)
}
inline double OHLC::_internal_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.open_;
}
inline void OHLC::_internal_set_open(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.open_ = value;
}

// double high = 2;
inline void OHLC::clear_high() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.high_ = 0;
}
inline double OHLC::high() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.high)
  return _internal_high();
}
inline void OHLC::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.high)
}
inline double OHLC::_internal_high() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.high_;
}
inline void OHLC::_internal_set_high(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.high_ = value;
}

// double low = 3;
inline void OHLC::clear_low() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.low_ = 0;
}
inline double OHLC::low() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.low)
  return _internal_low();
}
inline void OHLC::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.low)
}
inline double OHLC::_internal_low() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.low_;
}
inline void OHLC::_internal_set_low(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.low_ = value;
}

// double close = 4;
inline void OHLC::clear_close() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.close_ = 0;
}
inline double OHLC::close() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.close)
  return _internal_close();
}
inline void OHLC::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.close)
}
inline double OHLC::_internal_close() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.close_;
}
inline void OHLC::_internal_set_close(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.close_ = value;
}

// double volume = 5;
inline void OHLC::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = 0;
}
inline double OHLC::volume() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.volume)
  return _internal_volume();
}
inline void OHLC::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.volume)
}
inline double OHLC::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void OHLC::_internal_set_volume(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_ = value;
}

// double value = 6;
inline void OHLC::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline double OHLC::value() const {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.value)
  return _internal_value();
}
inline void OHLC::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ohlc.OHLC.value)
}
inline double OHLC::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void OHLC::_internal_set_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// string stock_code = 7;
inline void OHLC::clear_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_code_.ClearToEmpty();
}
inline const std::string& OHLC::stock_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ohlc.OHLC.stock_code)
  return _internal_stock_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OHLC::set_stock_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ohlc.OHLC.stock_code)
}
inline std::string* OHLC::mutable_stock_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stock_code();
  // @@protoc_insertion_point(field_mutable:ohlc.OHLC.stock_code)
  return _s;
}
inline const std::string& OHLC::_internal_stock_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_code_.Get();
}
inline void OHLC::_internal_set_stock_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_code_.Set(value, GetArena());
}
inline std::string* OHLC::_internal_mutable_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stock_code_.Mutable( GetArena());
}
inline std::string* OHLC::release_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ohlc.OHLC.stock_code)
  return _impl_.stock_code_.Release();
}
inline void OHLC::set_allocated_stock_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stock_code_.IsDefault()) {
          _impl_.stock_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ohlc.OHLC.stock_code)
}

// -------------------------------------------------------------------

// StockRequest

// string stock_code = 1;
inline void StockRequest::clear_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_code_.ClearToEmpty();
}
inline const std::string& StockRequest::stock_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ohlc.StockRequest.stock_code)
  return _internal_stock_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StockRequest::set_stock_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ohlc.StockRequest.stock_code)
}
inline std::string* StockRequest::mutable_stock_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stock_code();
  // @@protoc_insertion_point(field_mutable:ohlc.StockRequest.stock_code)
  return _s;
}
inline const std::string& StockRequest::_internal_stock_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_code_.Get();
}
inline void StockRequest::_internal_set_stock_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_code_.Set(value, GetArena());
}
inline std::string* StockRequest::_internal_mutable_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stock_code_.Mutable( GetArena());
}
inline std::string* StockRequest::release_stock_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ohlc.StockRequest.stock_code)
  return _impl_.stock_code_.Release();
}
inline void StockRequest::set_allocated_stock_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stock_code_.IsDefault()) {
          _impl_.stock_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ohlc.StockRequest.stock_code)
}

// -------------------------------------------------------------------

// SendOHLCResponse

// string message = 1;
inline void SendOHLCResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SendOHLCResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ohlc.SendOHLCResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendOHLCResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ohlc.SendOHLCResponse.message)
}
inline std::string* SendOHLCResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ohlc.SendOHLCResponse.message)
  return _s;
}
inline const std::string& SendOHLCResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void SendOHLCResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SendOHLCResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SendOHLCResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ohlc.SendOHLCResponse.message)
  return _impl_.message_.Release();
}
inline void SendOHLCResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ohlc.SendOHLCResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ohlc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh
