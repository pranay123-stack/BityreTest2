// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ohlc.proto

#include "ohlc.pb.h"
#include "ohlc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ohlc {

static const char* OHLCConsumerService_method_names[] = {
  "/ohlc.OHLCConsumerService/SendOHLC",
  "/ohlc.OHLCConsumerService/GetOHLC",
};

std::unique_ptr< OHLCConsumerService::Stub> OHLCConsumerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OHLCConsumerService::Stub> stub(new OHLCConsumerService::Stub(channel, options));
  return stub;
}

OHLCConsumerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendOHLC_(OHLCConsumerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOHLC_(OHLCConsumerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OHLCConsumerService::Stub::SendOHLC(::grpc::ClientContext* context, const ::ohlc::OHLC& request, ::ohlc::SendOHLCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ohlc::OHLC, ::ohlc::SendOHLCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendOHLC_, context, request, response);
}

void OHLCConsumerService::Stub::async::SendOHLC(::grpc::ClientContext* context, const ::ohlc::OHLC* request, ::ohlc::SendOHLCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ohlc::OHLC, ::ohlc::SendOHLCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOHLC_, context, request, response, std::move(f));
}

void OHLCConsumerService::Stub::async::SendOHLC(::grpc::ClientContext* context, const ::ohlc::OHLC* request, ::ohlc::SendOHLCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOHLC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ohlc::SendOHLCResponse>* OHLCConsumerService::Stub::PrepareAsyncSendOHLCRaw(::grpc::ClientContext* context, const ::ohlc::OHLC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ohlc::SendOHLCResponse, ::ohlc::OHLC, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendOHLC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ohlc::SendOHLCResponse>* OHLCConsumerService::Stub::AsyncSendOHLCRaw(::grpc::ClientContext* context, const ::ohlc::OHLC& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendOHLCRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OHLCConsumerService::Stub::GetOHLC(::grpc::ClientContext* context, const ::ohlc::StockRequest& request, ::ohlc::OHLC* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ohlc::StockRequest, ::ohlc::OHLC, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOHLC_, context, request, response);
}

void OHLCConsumerService::Stub::async::GetOHLC(::grpc::ClientContext* context, const ::ohlc::StockRequest* request, ::ohlc::OHLC* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ohlc::StockRequest, ::ohlc::OHLC, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOHLC_, context, request, response, std::move(f));
}

void OHLCConsumerService::Stub::async::GetOHLC(::grpc::ClientContext* context, const ::ohlc::StockRequest* request, ::ohlc::OHLC* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOHLC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ohlc::OHLC>* OHLCConsumerService::Stub::PrepareAsyncGetOHLCRaw(::grpc::ClientContext* context, const ::ohlc::StockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ohlc::OHLC, ::ohlc::StockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOHLC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ohlc::OHLC>* OHLCConsumerService::Stub::AsyncGetOHLCRaw(::grpc::ClientContext* context, const ::ohlc::StockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOHLCRaw(context, request, cq);
  result->StartCall();
  return result;
}

OHLCConsumerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OHLCConsumerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OHLCConsumerService::Service, ::ohlc::OHLC, ::ohlc::SendOHLCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OHLCConsumerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ohlc::OHLC* req,
             ::ohlc::SendOHLCResponse* resp) {
               return service->SendOHLC(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OHLCConsumerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OHLCConsumerService::Service, ::ohlc::StockRequest, ::ohlc::OHLC, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OHLCConsumerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ohlc::StockRequest* req,
             ::ohlc::OHLC* resp) {
               return service->GetOHLC(ctx, req, resp);
             }, this)));
}

OHLCConsumerService::Service::~Service() {
}

::grpc::Status OHLCConsumerService::Service::SendOHLC(::grpc::ServerContext* context, const ::ohlc::OHLC* request, ::ohlc::SendOHLCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OHLCConsumerService::Service::GetOHLC(::grpc::ServerContext* context, const ::ohlc::StockRequest* request, ::ohlc::OHLC* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ohlc

